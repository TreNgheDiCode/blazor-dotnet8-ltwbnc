@page "/category/{CategoryName}"
<style>
    .loading-spinner {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .product-container {
        padding: 20px;
    }

    .product-card {
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 15px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        background-color: #fff;
        text-align: center;
    }

        .product-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.12), 0 6px 6px rgba(0, 0, 0, 0.16);
        }

        .product-card img {
            height: 256px;
            width: 512px;
            object-fit: cover;
        }

    .card-title a {
        font-size: 25px;
        color: #333;
        text-decoration: none;
    }

        .card-title a:hover {
            color: #007bff;
        }

    .card-text {
        color: #666;
        margin-bottom: 10px;
        text-align: center;
    }

    .price {
        font-size: 1.1rem;
        font-weight: bold;
    }

    .view-detail-btn {
        background-color: #ff5a5f;
        border: none;
    }

        .view-detail-btn:hover {
            background-color: #e04a4e;
        }

    /* Slider styles */
    .carousel-item img {
        max-height: 500px;
        object-fit: cover;
    }

    .carousel-caption {
        background: rgba(0, 0, 0, 0.5);
        border-radius: 5px;
    }

    /* Center align h2 tags */
    h2 {
        text-align: center;
        margin: 20px 0;
    }

    .category-item {
        margin-right: 20px;
    }

        .category-item a {
            text-decoration: none;
            color: #000;
            font-weight: bold;
            font-size: 18px;
            transition: color 0.3s ease;
            padding: 5px 15px;
            border-radius: 5px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

            .category-item a:hover {
                background-color: #28a745; /* Green color */
                color: #fff;
            }

    .list-group-horizontal {
        align-items: center;
        justify-content: center;
    }

    .category {
        background-color: #f8f9fa;
        padding: 15px 0;
        border-bottom: 2px solid #28a745;
    }

    .col {
        text-align: center;
    }

    /* Dropdown Button */
    .dropdown-toggle {
        border: 2px solid #28a745;
        padding: 10px 15px;
        border-radius: 5px;
        color: #28a745;
        font-weight: bold;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 5px;
    }

        .dropdown-toggle:hover {
            background-color: #28a745;
            color: #fff;
        }

    /* Dropdown Menu */
    .dropdown-menu {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 10px 0;
    }

    .dropdown-item-text {
        padding: 10px 20px;
        font-size: 16px;
        font-weight: 500;
        transition: background-color 0.3s ease, color 0.3s ease;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

        .dropdown-item-text a {
            text-decoration: none;
            color: #28a745; /* Green color */
            transition: color 0.3s ease;
        }

        .dropdown-item-text:hover {
            background-color: #28a745; /* Green color */
            color: #fff;
            border-radius: 5px;
        }

            .dropdown-item-text:hover a {
                color: #fff;
            }

    /* Align icon and text in the dropdown toggle button */
    .dropdown-toggle img {
        height: 20px; /* Adjust size of the icon as necessary */
    }
</style>

<div class="category-item dropdown">
    <a class="dropdown-toggle" data-bs-toggle="dropdown">Danh Mục</a>
    @if (cate != null)
    {
        <ul class="dropdown-menu show">
            @foreach (var item in cate.Categories)
            {
                <li class="dropdown-item-text "><a href="/category/@item.Name">@item.Name</a></li>
            }
        </ul>
    }
</div>
<h2>DANH SÁCH SẢN PHẨM</h2>
@if (loading)
{
    <div class="loading-spinner">
        <button class="btn btn-primary" type="button" disabled>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Đang tải...
        </button>
    </div>
}
else
{
    

    <div class="product-container">
        @if (products != null && products.Any())
        {
            <div class="row row-cols-1 row-cols-md-3 g-4">
                @foreach (var product in products)
                {
                    <div class="col">
                        <div class="product-card">
                            <img src="@product.ProductImages[0].ImageUrl" class="card-img-top img-fluid" alt="Product Image">
                            <div class="card-title">
                                <a href="/products/detail/@product.Id">@product.Name</a>
                            </div>
                            <p class="card-text">@product.Description</p>
                            <p class="card-text">Số lượng: @product.ProductOptions.Sum(opt => opt.Quantity)</p>
                            <div class="price" style="color:red">Giá: <span>@string.Format("{0:0,0 đồng}", product.Price)</span></div>
                            <button class="btn btn-danger view-detail-btn" @onclick="() => NavigateToProductDetail(product.Id)">Xem chi tiết</button>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-center">Không có sản phẩm nào!.</p>
        }
    </div>
}

@code {
    [Parameter]
    public string? Categoryname { get; set; } // Thêm thuộc tính này
    private bool loading = false;
    private List<ProductItem>? products;
    private CategoryList? cate; 

    protected override async Task OnParametersSetAsync()
    {
        await LoadProducts();
        await categoty();
    }

    private async Task categoty()
    {
        // Thêm console log để kiểm tra dữ liệu trả về
        Console.WriteLine("Fetching categories...");

        ServiceModel<CategoryList> result = await categoryService.GetCategories(1, 1);
        if (result.Success == true)
        {
            cate = result.Data;
            Console.WriteLine("đã tìm thấy danh mục");
        }
        else
        {
            Console.WriteLine("không tìm thấy danh mục");
        }
    }
    private async Task LoadProducts()
    {
        loading = true;
        ServiceModel<ProductList> result = await productService.GetProducts();
        if (result.Success == true && result.Data?.Products != null)
        {
            // Sử dụng CategoryId để lọc sản phẩm theo danh mục
            products = result.Data.Products.Where(p => p.CategoryName == Categoryname).ToList();
        }
        loading = false;
    }

    private void NavigateToProductDetail(int productId)
    {
        NavigationManager.NavigateTo($"/products/detail/{productId}");
    }

    
}
