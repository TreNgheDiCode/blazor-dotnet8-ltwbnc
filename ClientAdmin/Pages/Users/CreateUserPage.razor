@page "/user/create"

@using BaseLibrary.DTOs.Auth
@using BaseLibrary.Models
@using Microsoft.AspNetCore.Http
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DataForm
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Spinner

<div class="bg-white shadow-lg p-2">
    <h1 class="text-black
         fs-5 mb-0">
        <strong>
            Thêm người dùng mới
        </strong>
    </h1>
</div>

@if (IsLoading == true)
{
    <div class="d-flex justify-content-center align-items-center">
        <SfSpinner @bind-Visible="@IsLoading">
        </SfSpinner>
    </div>
}
else
{
    <div class="px-4">
        <SfBreadcrumb class="my-2">
            <BreadcrumbItems>
                <BreadcrumbItem Text="Trang chủ" IconCss="bi bi-house-door-fill" Url="/"></BreadcrumbItem>
                <BreadcrumbItem Text="Người dùng" IconCss="bi bi-people" Url="/user"></BreadcrumbItem>
                <BreadcrumbItem Text="Thêm người dùng" IconCss="bi bi-person-add"></BreadcrumbItem>
            </BreadcrumbItems>
            <BreadcrumbTemplates>
                <ItemTemplate>
                    <SfChip>
                        <ChipItems>
                            <ChipItem Text="@context.Text" Enabled="true" LeadingIconCss="@context.IconCss"></ChipItem>
                        </ChipItems>
                    </SfChip>
                </ItemTemplate>
                <SeparatorTemplate>
                    <span class="e-icons e-bullet-arrow"></span>
                </SeparatorTemplate>
            </BreadcrumbTemplates>
        </SfBreadcrumb>

        <SfDataForm ID="CreateUserForm" Model="@userDetail" ButtonsAlignment="FormButtonsAlignment.Center" ColumnCount="2" ColumnSpacing="24px" ValidationDisplayMode="FormValidationDisplay.Tooltip" OnSubmit="@SubmitHandler">
            <FormValidator>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidator>
            <FormItems>
                <FormGroup LabelText="Ảnh đại diện" ID="user-cover-group">
                    <FormItem Field="@nameof(userDetail.Photo)" LabelText="Ảnh đại diện">
                        <Template>
                            @if (string.IsNullOrEmpty(ImageUrl))
                                {
                                    <label>Chọn ảnh đại diện</label>
                                    <SfUploader AutoUpload="true" AllowedExtensions=".png, .jpeg, .webp, .svg, .gif, .bmp, .tiff, .jpg">
                                        <UploaderEvents ValueChange="@OnUploadImages">
                                        </UploaderEvents>
                                    </SfUploader>
                                }
                                else
                                {
                                    <div class="e-avatar e-avatar-xlarge e-avatar-circle">
                                        <img src="@ImageUrl" alt="User Avatar" />
                                    </div>
                                }
                            </Template>
                        </FormItem>
                    </FormGroup>
                    <FormGroup LabelText="Thông tin cá nhân" ID="user-information-group" ColumnCount="6" ColumnSpacing="16px">
                        <FormItem Field="@nameof(userDetail.Fullname)" LabelText="Họ và Tên" ColumnSpan="3"></FormItem>
                        <FormItem Field="@nameof(userDetail.Email)" LabelText="Email" ColumnSpan="3"></FormItem>
                        <FormItem Field="@nameof(userDetail.Password)" LabelText="Mật khẩu" ColumnSpan="3"></FormItem>
                        <FormItem Field="@nameof(userDetail.ConfirmPassword)" LabelText="Nhập lại mật khẩu" ColumnSpan="3"></FormItem>
                        <FormItem Field="@nameof(userDetail.PhoneNumber)" LabelText="Số điện thoại" ColumnSpan="3"></FormItem>
                        <FormItem Field="@nameof(userDetail.Address)" LabelText="Địa chỉ cụ thể" ColumnSpan="3"></FormItem>
                        <FormItem Field="@nameof(userDetail.ProvinceId)" LabelText="Chọn tỉnh/thành phố" ColumnSpan="2">
                            <Template>
                                <label class="e-form-label">Chọn tỉnh/thành phố</label>
                                <SfAutoComplete @ref="autoObjProvince" TValue="ProvinceItem" TItem="ProvinceItem" Placeholder="Chọn tỉnh/thành phố" DataSource="@Provinces" Highlight="true" CssClass="e-multi-column">
                                    <AutoCompleteFieldSettings Text="FullName" Value="Code"></AutoCompleteFieldSettings>
                                    <AutoCompleteEvents Filtering="OnProvinceFiltering" TValue="ProvinceItem" TItem="ProvinceItem" OnValueSelect="@OnProvinceSelecthandler"></AutoCompleteEvents>
                                    <AutoCompleteTemplates TItem="ProvinceItem">
                                        <HeaderTemplate>
                                            <table>
                                                <tr>
                                                    <th>Mã</th>
                                                    <th>Tỉnh/thành phố</th>
                                                </tr>
                                            </table>
                                        </HeaderTemplate>
                                        <ItemTemplate Context="itemContext">
                                            <table>
                                                <tbody>
                                                    <tr>
                                                        <td>@itemContext.Code</td>
                                                        <td>@itemContext.FullName</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </ItemTemplate>
                                    </AutoCompleteTemplates>
                                </SfAutoComplete>
                                <ValidationMessage For="@(() => userDetail.ProvinceId)"></ValidationMessage>
                            </Template>
                        </FormItem>
                        <FormItem Field="@nameof(userDetail.DistrictId)" LabelText="Chọn quận/huyện" ColumnSpan="2">
                            <Template>
                                <label class="e-form-label">Chọn quận/huyện</label>
                                <SfAutoComplete @ref="autoObjDistrict" TValue="DistrictItem" TItem="DistrictItem" Placeholder="Chọn quận/huyện" DataSource="@Districts" Highlight="true" CssClass="e-multi-column">
                                    <AutoCompleteFieldSettings Text="FullName" Value="Code"></AutoCompleteFieldSettings>
                                    <AutoCompleteEvents Filtering="OnDistrictFiltering" TValue="DistrictItem" TItem="DistrictItem" OnValueSelect="@OnDistrictSelecthandler"></AutoCompleteEvents>
                                    <AutoCompleteTemplates TItem="DistrictItem">
                                        <HeaderTemplate>
                                            <table>
                                                <tr>
                                                    <th>Mã</th>
                                                    <th>Quận/huyện</th>
                                                </tr>
                                            </table>
                                        </HeaderTemplate>
                                        <ItemTemplate Context="itemContext">
                                            <table>
                                                <tbody>
                                                    <tr>
                                                        <td>@itemContext.Code</td>
                                                        <td>@itemContext.FullName</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </ItemTemplate>
                                    </AutoCompleteTemplates>
                                </SfAutoComplete>
                                <ValidationMessage For="@(() => userDetail.DistrictId)"></ValidationMessage>
                            </Template>
                        </FormItem>
                        <FormItem Field="@nameof(userDetail.WardId)" LabelText="Chọn phường/xã" ColumnSpan="2">
                            <Template>
                                <label class="e-form-label">Chọn phường/xã</label>
                                <SfAutoComplete @ref="autoObjWard" TValue="WardItem" TItem="WardItem" Placeholder="Chọn phường/xã" DataSource="@Wards" Highlight="true" CssClass="e-multi-column">
                                    <AutoCompleteFieldSettings Text="FullName" Value="Code"></AutoCompleteFieldSettings>
                                    <AutoCompleteEvents Filtering="OnWardFiltering" TValue="WardItem" TItem="WardItem" OnValueSelect="@OnWardSelecthandler"></AutoCompleteEvents>
                                    <AutoCompleteTemplates TItem="WardItem">
                                        <HeaderTemplate>
                                            <table>
                                                <tr>
                                                    <th>Mã</th>
                                                    <th>Phường/xã</th>
                                                </tr>
                                            </table>
                                        </HeaderTemplate>
                                        <ItemTemplate Context="itemContext">
                                            <table>
                                                <tbody>
                                                    <tr>
                                                        <td>@itemContext.Code</td>
                                                        <td>@itemContext.FullName</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </ItemTemplate>
                                    </AutoCompleteTemplates>
                                </SfAutoComplete>
                                <ValidationMessage For="@(() => userDetail.WardId)"></ValidationMessage>
                            </Template>
                        </FormItem>
                        <FormItem Field="@nameof(userDetail.Role)" LabelText="Ủy quyền" ColumnSpan="6" ID="Role">
                            <Template>
                                <label for="@nameof(userDetail.Role)" class="e-form-label">Chọn ủy quyền</label>
                                <SfDropDownList TValue="string" TItem="SystemRole" DataSource="@Roles" @bind-Value="userDetail.Role" Placeholder="Chọn ủy quyền" CssClass="e-multi-column" ID="Role">
                                    <DropDownListTemplates TItem="SystemRole">
                                        <ValueTemplate>
                                            @if (context.Name == "Admin")
                                            {
                                                <span class="badge bg-danger">Quản trị viên</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-success">Người dùng</span>
                                            }
                                        </ValueTemplate>
                                    </DropDownListTemplates>
                                    <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                                </SfDropDownList>
                                <ValidationMessage For="@(() => userDetail.Role)"></ValidationMessage>
                            </Template>
                        </FormItem>
                    </FormGroup>
                </FormItems>
                <FormButtons>
                    <SfButton typeof="submit">Thêm người dùng</SfButton>
                </FormButtons>
            </SfDataForm>
        </div>
}

@code {
    private bool IsLoading { get; set; } = false;
    SfAutoComplete<ProvinceItem, ProvinceItem> autoObjProvince;
    SfAutoComplete<DistrictItem, DistrictItem> autoObjDistrict;
    SfAutoComplete<WardItem, WardItem> autoObjWard;

    List<SystemRole> Roles = new List<SystemRole> {
        new SystemRole { Id = 1, Name = "Admin" },
        new SystemRole { Id = 2, Name = "User" }
    };

    public Query query { get; set; }
    private Register userDetail = new Register();
    public List<ProvinceItem> Provinces { get; set; } = new();
    public List<DistrictItem> Districts { get; set; } = new();
    public List<WardItem> Wards { get; set; } = new();

    public string SelectedProvince { get; set; }
    public string SelectedDistrict { get; set; }
    public string SelectedWard { get; set; }

    public string? ImageUrl { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        try
        {
            ServiceModel<ProvinceList> result = await addressService.GetProvinces();
            if (result.Success == true && result.Data is not null)
            {
                Provinces = result.Data.Provinces;
            }
        }
        catch (Exception)
        {
            await DisplayDialog("Kiểm tra lại kết nối máy chủ", "Lỗi lấy danh sách tỉnh/thành phố");
        }
        finally
        {
            IsLoading = false;
        }
    }

    public async void SubmitHandler(EditContext context)
    {
        bool isValid = context.Validate();

        if (isValid)
        {
            IsLoading = true;
            try
            {
                userDetail.Photo = ImageUrl;
                var res = await accountService.CreateAsync(userDetail);

                if (res.Flag == false)
                {
                    await DisplayDialog(res.Message, "Lỗi tạo người dùng");
                }
                else
                {
                    await DisplayDialog(res.Message, "Tạo người dùng thành công");

                    NavManager.NavigateTo("/user");
                }
            }
            catch (Exception ex)
            {
                await DisplayDialog(ex.ToString(), "Lỗi tạo người dùng");
            }
            finally
            {
                IsLoading = false;
            }
        }
    }

    private async Task DisplayDialog(string content, string title)
    {
        await DialogService.AlertAsync(content, title);
    }

    public async Task OnProvinceFiltering(FilteringEventArgs args)
    {
        args.PreventDefaultAction = true;

        var orWhere = WhereFilter.Or(new List<WhereFilter> {
                                new WhereFilter() { Field = "Code", Operator = "contains", value = args.Text, IgnoreCase = true },
                                new WhereFilter() { Field = "FullName", Operator = "contains", value = args.Text, IgnoreCase = true }
                                });
        var query = new Query().Where(orWhere);
        query = !string.IsNullOrEmpty(args.Text) ? query : new Query();
        await autoObjProvince.FilterAsync(Provinces, query);
    }

    public async Task OnDistrictFiltering(FilteringEventArgs args)
    {
        args.PreventDefaultAction = true;

        var orWhere = WhereFilter.Or(new List<WhereFilter> {
                                new WhereFilter() { Field = "Code", Operator = "contains", value = args.Text, IgnoreCase = true },
                                new WhereFilter() { Field = "FullName", Operator = "contains", value = args.Text, IgnoreCase = true }
                                });
        var query = new Query().Where(orWhere);
        query = !string.IsNullOrEmpty(args.Text) ? query : new Query();
        await autoObjDistrict.FilterAsync(Districts, query);
    }

    public async Task OnWardFiltering(FilteringEventArgs args)
    {
        args.PreventDefaultAction = true;

        var orWhere = WhereFilter.Or(new List<WhereFilter> {
                                new WhereFilter() { Field = "Code", Operator = "contains", value = args.Text, IgnoreCase = true },
                                new WhereFilter() { Field = "FullName", Operator = "contains", value = args.Text, IgnoreCase = true }
                                });
        var query = new Query().Where(orWhere);
        query = !string.IsNullOrEmpty(args.Text) ? query : new Query();
        await autoObjWard.FilterAsync(Wards, query);
    }

    async private void OnProvinceSelecthandler(SelectEventArgs<ProvinceItem> args)
    {
        SelectedProvince = args.ItemData.Code;

        // Tải danh sách quận/huyện
        try
        {
            ServiceModel<DistrictList> result = await addressService.GetDistricts(SelectedProvince);
            if (result.Success == true && result.Data is not null)
            {
                Districts = result.Data.Districts;
                userDetail.ProvinceId = SelectedProvince;
            }
        }
        catch (Exception ex)
        {
            await DisplayDialog("Kiểm tra lại kết nối máy chủ", ex.Message);
        }
    }

    async private void OnDistrictSelecthandler(SelectEventArgs<DistrictItem> args)
    {
        SelectedDistrict = args.ItemData.Code;
        // Tải danh sách phường/xã
        try
        {
            ServiceModel<WardList> result = await addressService.GetWards(SelectedProvince, SelectedDistrict);
            if (result.Success == true && result.Data is not null)
            {
                Wards = result.Data.Wards;
                userDetail.DistrictId = SelectedDistrict;
            }
        }
        catch (Exception ex)
        {
            await DisplayDialog("Kiểm tra lại kết nối máy chủ", "Lỗi lấy danh sách phường/xã");
        }
    }

    async private void OnWardSelecthandler(SelectEventArgs<WardItem> args)
    {
        SelectedWard = args.ItemData.Code;
        userDetail.WardId = SelectedWard;
    }

    async Task OnUploadImages(UploadChangeEventArgs args)
    {
        try
        {
            foreach (var file in args.Files)
            {
                using (var stream = file.File.OpenReadStream(long.MaxValue))
                {
                    var res = await cloudinaryService.UploadImageAsync(stream, file.FileInfo.Name);

                    if (res.Success == false)
                    {
                        await DisplayDialog("Kiểm tra lại kết nối máy chủ", "Lỗi tải ảnh lên máy chủ");
                    }
                    else
                    {
                        await DisplayDialog("Tải ảnh thành công", "Tải ảnh thành công");
                        ImageUrl = res.Data;
                        StateHasChanged();
                    }
                }
            }
        }
        catch (Exception)
        {
            await DisplayDialog("Kiểm tra lại kết nối máy chủ", "Lỗi tải ảnh lên máy chủ");
        }
    }
}

<style>
    .e-bullet-arrow::before {
        content: '\e763';
        font-size: 12px;
    }

    .e-highlight {
        background-color: yellow;
    }

    .e-avatar.e-avatar-xlarge {
        height: 128px;
        width: 128px;
    }

    e-ddl.e-lib.e-input-group.e-control-container.e-control-wrapper.e-multi-column.e-success.e-valid-input.modified.valid {
        align-items: center;
        padding-left: 8px;
    }
</style>